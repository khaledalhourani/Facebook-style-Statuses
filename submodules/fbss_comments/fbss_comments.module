<?php

/**
 * @file
 *   Allows comments on Facebook-style Statuses.
 * @todo
 *   - Integrations:
 *       + activity (trigger/actions, token)
 *       + flag
 *       + rules
 *       + userpoints
 *       + devel generate
 *       + popups api
 *       + sms framework
 *       + views bulk operations
 *   - Document API and add README.txt.
 *   - Turn the comment theme functions into templates.
 */

//===============
// DRUPAL HOOKS.
//===============

/**
 * Implements hook_init().
 */
function fbss_comments_init() {
  if (strpos($_GET['q'], 'admin/structure/views/edit') !== FALSE) {
    $path = drupal_get_path('module', 'fbss_comments');
    drupal_add_js($path . '/fbss_comments.js');
    drupal_add_css($path . '/fbss_comments.css');
  }
}

/**
 * Implements hook_menu().
 */
function fbss_comments_menu() {
  $items = array();
  $items['statuses/comment/%fbss_comments/edit'] = array(
    'title' => 'Edit status comment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fbss_comments_edit', 2),
    'access callback' => 'fbss_comments_can_edit',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'fbss_comments.edit.inc',
  );
  $items['statuses/comment/%fbss_comments/delete'] = array(
    'title' => 'Delete status comment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fbss_comments_delete', 2),
    'access callback' => 'fbss_comments_can_delete',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'fbss_comments.edit.inc',
  );
  return $items;
}

/**
 * Implements hook_user_cancel().
 */
function fbss_comments_user_cancel($edit, $account, $method) {
  db_delete('fbss_comments')
	  ->condition('uid', $account->uid)
	  ->execute();
}

/**
 * Implements hook_user().
 */
function fbss_comments_user_OLD($op, &$edit, &$account, $category = NULL) { }

/**
 * Implements hook_permission().
 */
function fbss_comments_permission() {
  return array(
    'delete all status comments' => array(
      'title' => t('delete all status comments'),
      'description' => t('TODO Add a description for \'delete all status comments\''),
    ),
    'delete own status comments' => array(
      'title' => t('delete own status comments'),
      'description' => t('TODO Add a description for \'delete own status comments\''),
    ),
    'delete comments on own statuses' => array(
      'title' => t('delete comments on own statuses'),
      'description' => t('TODO Add a description for \'delete comments on own statuses\''),
    ),
    'edit all status comments' => array(
      'title' => t('edit all status comments'),
      'description' => t('TODO Add a description for \'edit all status comments\''),
    ),
    'edit own status comments' => array(
      'title' => t('edit own status comments'),
      'description' => t('TODO Add a description for \'edit own status comments\''),
    ),
    'edit comments on own statuses' => array(
      'title' => t('edit comments on own statuses'),
      'description' => t('TODO Add a description for \'edit comments on own statuses\''),
    ),
    'post status comment' => array(
      'title' => t('post status comment'),
      'description' => t('TODO Add a description for \'post status comment\''),
    ),
    'view all status comments' => array(
      'title' => t('view all status comments'),
      'description' => t('TODO Add a description for \'view all status comments\''),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function fbss_comments_theme($existing, $type, $theme, $path) {
  return array(
    'fbss_comments_item' => array(
      'variables' => array(
        'comment' => NULL,
        'classes' => array(),
        'destination' => '',
      ),
    ),
    'fbss_comments_items' => array(
      'variables' => array(
        'comments' => array(),
        'delay_load' => TRUE,
        'destination' => '',
      ),
    ),
    'fbss_comments_form_display' => array(
      'variables' => array(
        'sid' => NULL,
        'delay_load_form' => TRUE,
        'delay_load_comments' => TRUE,
      ),
    ),
  );
}

//==================
// THEME FUNCTIONS.
//==================

/**
 * Formats a comment.
 *
 * @param $comment
 *   The comment object.
 * @param $classes
 *   An array of extra classes to include in the comment status wrapper div.
 * @param $destination
 *   The destination query string for edit and delete links. Usually the current
 *   page unless this function is called from a JavaScript callback page.
 * @return
 *   The fully themed status comment or FALSE if the current user does not have
 *   permission to view the comment.
 */
function theme_fbss_comments_item($variables) {
  $comment = $variables['comment'];
  $classes = $variables['classes'];
  $destination = $variables['destination'];
  if (!fbss_comments_can_view($comment)) {
    return FALSE;
  }
  array_unshift($classes, 'fbss-comments-comment');
  $classes = implode(' ', $classes);
  $output = '<div class="' . $classes . '">';
  $output .= '<div class="fbss-comments-author">' . theme('username', array('account' => _facebook_status_user_load($comment->uid))) . '</div>';
  $comment_text = _facebook_status_run_filter($comment->comment);
  $comment_text = nl2br($comment_text);
  $output .= '<div class="fbss-comments-text">' . $comment_text . '</div>';
  $output .= '<div class="fbss-comments-closure">';
  $output .= '<span class="fbss-comments-created">' . theme('facebook_status_time', array('time' => $comment->created)) . '</span>';
  $q = $_GET['q'];
  if ($destination) {
    $q = $destination;
  }
  elseif (strpos($q, 'fbss_comments/js/refresh') !== FALSE) {
    $q = '<front>';
  }
  if (fbss_comments_can_edit($comment)) {
    $output .= '<span class="fbss-comments-edit-delete">' .
      l(t('Edit'), 'statuses/comment/' . $comment->cid . '/edit', array('query' => array('destination' => $q)))
      . '</span>';
  }
  if (fbss_comments_can_delete($comment)) {
    $output .= '<span class="fbss-comments-edit-delete">' .
      l(t('Delete'), 'statuses/comment/' . $comment->cid . '/delete', array('query' => array('destination' => $q)))
      . '</span>';
  }
  $output .= '</div></div>';
  // Invokes hook_fbss_comments_render_alter(&$output, $comment).
  drupal_alter('fbss_comments_render', $output, $comment);
  return $output;
}

/**
 * Displays a status comment thread.
 *
 * @param $comments
 *   An array of comment objects to display.
 * @param $delay_load
 *   If TRUE and there are no comments on the relevant status, a "show all
 *   comments" link will be displayed instead of the full list of comments. When
 *   clicked, the full list of comments will be shown for users with JavaScript
 *   enabled. Users with JavaScript disabled will be redirected to the status
 *   thread page. If FALSE the "comment" link (with the comment form hidden)
 *   will be used instead of just showing the comment form.
 * @param $destination
 *   The destination query string for edit and delete links. Usually the current
 *   page unless this function is called from a JavaScript callback page.
 * @return
 *   Themed HTML for the status comments.
 */
function theme_fbss_comments_items($variables) {
  $comments = $variables['comments'];
  $delay_load = $variables['delay_load'];
  $destination = $variables['destination'];
  $count = count($comments);
  if (!$count) {
    return;
  }
  $path = drupal_get_path('module', 'fbss_comments');
  drupal_add_js($path . '/fbss_comments.js');
  $output = '<div class="fbss-comments">';
  if ($count > 3 && $delay_load) {
    $options = array('attributes' => array(
        'class' => 'fbss-comments-show-comments-link fbss-comments-show-comments',
        'id' => 'fbss-comments-toggle-' . $comments[0]->sid,
      ));
    if ($count > 9) {
      $options['attributes']['class'] = 'fbss-comments-show-comments-link';
    }
    $output .= l(t('Show all @count comments', array('@count' => $count)), 'statuses/' . $comments[0]->sid, $options);
  }
  foreach ($comments as $key => $comment) {
    $classes = array();
    if ($key == 0) {
      $classes[] = 'first';
    }
    if ($key == $count - 1) {
      $classes[] = 'last';
    }
    if ($key % 2 == 0) {
      $classes[] = 'odd';
    }
    else {
      $classes[] = 'even';
    }
    if ($count > 3 && $key != $count - 1 && $key != $count - 2 && $delay_load) {
      $classes[] = 'fbss-comments-hide';
    }
    if (!$delay_load || $count < 10 || $key == $count - 1 || $key == $count - 2) {
      $output .= theme('fbss_comments_item', array('comment' => $comment, 'classes' => $classes, 'destination' => $destination));
    }
  }
  $output .= '</div>';
  return $output;
}

/**
 * Displays the status comment form.
 *
 * @param $sid
 *   The Status ID of the comment thread.
 * @param $delay_load_form
 *   If TRUE and there are no comments on the relevant status, a "comment" link
 *   will be displayed instead of the comment form. When clicked, the form will
 *   be revealed for users with JavaScript enabled. Users with JavaScript
 *   disabled will be redirected to the status thread page. If FALSE the
 *   "comment" link will not be used and the comment form will not be initially
 *   hidden.
 * @param $delay_load_comments
 *   If TRUE and there are no comments on the relevant status, a "show all
 *   comments" link will be displayed instead of the full list of comments. When
 *   clicked, the full list of comments will be shown for users with JavaScript
 *   enabled. Users with JavaScript disabled will be redirected to the status
 *   thread page. If FALSE the "comment" link (with the comment form hidden)
 *   will be used instead of just showing the comment form.
 * @return
 *   Themed HTML for the status form.
 */
function theme_fbss_comments_form_display($variables) {
  $sid = $variables['sid'];
  $delay_load_form = $variables['delay_load_form'];
  $delay_load_comments = $variables['delay_load_comments'];
  if (fbss_comments_can_post(facebook_status_load($sid))) {
    $path = drupal_get_path('module', 'fbss_comments');
    drupal_add_js($path . '/fbss_comments.js');
    $output = '';
    if ($delay_load_form && !fbss_comments_count_comments($sid)) {
      $output = '<div class="fbss-comments-show-comment-form" id="fbss-comments-toggle-' . $sid . '">' .
        l(t('Comment'), 'statuses/' . $sid, array('attributes' => array( 'class' => 'fbss-comments-show-comment-form-link')))
        . '</div>';
     
      return $output . '<div class="fbss-comments-hide fbss-comments-form">' . drupal_render(drupal_get_form('fbss_comments_box', $sid, $delay_load_comments)) . '</div>';
    }
    
    return '<div class="fbss-comments-form">' . drupal_render(drupal_get_form('fbss_comments_box', $sid, $delay_load_comments)) . '</div>';
  }
}

//================
// API FUNCTIONS.
//================

/**
 * Loads a status comment.
 *
 * @param $cid
 *   The status comment ID.
 * @return
 *   A full status comment object.
 */
function fbss_comments_load($cid) {
  if (!is_numeric($cid)) {
    return;
  }
  $node_additions = db_query("SELECT * FROM {fbss_comments} WHERE cid = :cid", array(':cid' => $cid))->fetchObject();
  $new_cid = new stdClass();
  foreach ($node_additions as $property => &$value) {
    $new_cid->$property = $value;
  }
  return $new_cid;
}

/**
 * Retrieves the comments from a thread.
 *
 * @param $sid
 *   The Status ID of the thread for which to retrieve comments.
 * @return
 *   An array of comment objects for the relative thread.
 */
function fbss_comments_get_comments($sid) {
  $result = db_query("SELECT * FROM {fbss_comments} WHERE sid = :sid ORDER BY created ASC, cid ASC", array(':sid' => $sid));
  $results = array();
  while ($comment = $result->fetchObject()) {
    $results[] = $comment;
  }
  return $results;
}

/**
 * Saves a status comment.
 *
 * @param $comment
 *   The status comment object.
 * @return
 *   The saved status comment object.
 */
function fbss_comments_save_comment($sid, $comment, $uid = NULL) {
  if (!$uid) {
    $uid = $GLOBALS['user']->uid;
  }
  $c = (object) array(
    'sid' => $sid,
    'uid' => $uid,
    'created' => REQUEST_TIME,
    'comment' => $comment,
  );
  drupal_write_record('fbss_comments', $c);
  module_invoke_all('fbss_comments_after_save', $c, FALSE);
  return $c;
}

/**
 * Deletes a status comment.
 *
 * @param $cid
 *   The comment ID.
 */
function fbss_comments_delete_comment($cid) {
  db_delete('fbss_comments')
	  ->condition('cid', $cid)
	  ->execute();
  module_invoke_all('fbss_comments_delete', $cid);
}

/**
 * Counts the number of comments on a status.
 */
function fbss_comments_count_comments($sid) {
  return db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = :sid", array(':sid' => $sid))->fetchField();
}

/**
 * Determines whether a user has commented on this status.
 *
 * @param $sid
 *   The Status ID of the thread for which to retrieve comments.
 * @param $uid
 *   The User ID of the user for whom to check participation. Defaults to the
 *   current user.
 * @return
 *   TRUE if the user has commented on this status; FALSE otherwise.
 */
function fbss_comments_has_commented($sid, $uid = NULL) {
  if (!$uid) {
    $uid = $GLOBALS['user']->uid;
  }
  $result = db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = :sid and uid = :uid", array(':sid' => $sid, ':uid' => $uid))->fetchField();
  return $result > 0;
}

/**
 * Determines whether a user can view the relevant status.
 *
 * @param $comment
 *   The comment object.
 * @param $account
 *   The $user object of the user whose access will be checked. Defaults to the
 *   current user.
 */
function fbss_comments_can_view($comment, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $allow = TRUE;
  // Only change $allow if you need it to be FALSE.
  // Do not set it to TRUE as this may override other modules' actions.
  drupal_alter('fbss_comments_can_view', $allow, $comment, $account);
  return $allow && user_access('view all status comments', $account);
}

/**
 * Determines whether a user can post a comment on the relevant status.
 *
 * @param $status
 *   The status object.
 * @param $account
 *   The $user object of the user whose access will be checked. Defaults to the
 *   current user.
 * @return
 *   TRUE if the user can post the comment; FALSE otherwise.
 */
function fbss_comments_can_post($status, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $allow = TRUE;
  // Only change $allow if you need it to be FALSE.
  // Do not set it to TRUE as this may override other modules' actions.
  drupal_alter('fbss_comments_can_post', $allow, $status, $account);
  return $allow && user_access('post status comment', $account);
}

/**
 * Determines whether a user can edit a comment on the relevant status.
 *
 * @param $comment
 *   The comment object.
 * @param $account
 *   The $user object of the user whose access will be checked. Defaults to the
 *   current user.
 * @return
 *   TRUE if the user can edit the comment; FALSE otherwise.
 */
function fbss_comments_can_edit($comment, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $allow = TRUE;
  // Only change $allow if you need it to be FALSE.
  // Do not set it to TRUE as this may override other modules' actions.
  drupal_alter('fbss_comments_can_edit', $allow, $comment, $account);
  // This is in two separate statements (instead of one big return statement)
  // so that the SQL in _fbss_comments_get_thread_author() does not usually need to be run.
  if ($allow && (user_access('edit all status comments', $account) ||
    (user_access('edit own status comments', $account) && $account->uid == $comment->uid)
  )) {
    return TRUE;
  }
  return $allow && user_access('edit comments on own statuses', $account)
    && $account->uid == _fbss_comments_get_thread_author($comment->sid);
}

/**
 * Determines whether a user can delete a comment on the relevant status.
 *
 * @param $comment
 *   The comment object.
 * @param $account
 *   The $user object of the user whose access will be checked. Defaults to the
 *   current user.
 * @return
 *   TRUE if the user can delete the comment; FALSE otherwise.
 */
function fbss_comments_can_delete($comment, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $allow = TRUE;
  // Only change $allow if you need it to be FALSE.
  // Do not set it to TRUE as this may override other modules' actions.
  drupal_alter('fbss_comments_can_delete', $allow, $comment, $account);
  // This is in two separate statements (instead of one big return statement)
  // so that the SQL in _fbss_comments_get_thread_author() does not usually need to be run.
  if ($allow && (user_access('delete all status comments', $account) ||
    (user_access('delete own status comments', $account) && $account->uid == $comment->uid)
  )) {
    return TRUE;
  }
  return $allow && user_access('delete comments on own statuses', $account)
    && $account->uid == _fbss_comments_get_thread_author($comment->sid);
}

//===================
// HELPER FUNCTIONS.
//===================

/**
 * Determines the author of a status.
 *
 * @param $sid
 *   The Status ID of the thread in question.
 * @return
 *   The User ID of the author of the relevant status.
 */
function _fbss_comments_get_thread_author($sid) {
  return db_query("SELECT sender FROM {facebook_status} WHERE sid = :sid", array(':sid' => $sid))->fetchField();
}

//=================
// FORM FUNCTIONS.
//=================

/**
 * The status comment form.
 *
 * @param $sid
 *   The Status ID of the thread.
 * @param $delay_load
 *   If TRUE and there are no comments on the relevant status, a "show all
 *   comments" link will be displayed instead of the full list of comments. When
 *   clicked, the full list of comments will be shown for users with JavaScript
 *   enabled. Users with JavaScript disabled will be redirected to the status
 *   thread page. If FALSE the "comment" link with delayed comment form loading
 *   will not be used.
 */
function fbss_comments_box($form, $form_state, $sid, $delay_load = TRUE) {
  $path = drupal_get_path('module', 'fbss_comments');
  drupal_add_css($path . '/fbss_comments.css');
  $form = array();
  if (!isset($form_state['fbss_comments']['q'])) {
    $form['#qu'] = $_GET['q'];
  }
  else {
    $form['#qu'] = $form_state['fbss_comments']['q'];
  }
  $comments = fbss_comments_get_comments($sid);
  $form['before'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="fbss-comments-replace-' . $sid . '">'
  );
  $form['comments'] = array('#markup' => theme('fbss_comments_items', array('comments' => $comments, 'delay_load' => $delay_load, 'destination' => $form['#qu'])));
  if (count($comments)) {
    $form['start-hide'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="fbss-comments-show-comment-form-inner" id="fbss-comments-inner-toggle-' . $sid . '">' .
      l(t('Comment'), 'statuses/' . $sid, array('attributes' => array('class' => 'fbss-comments-show-comment-inner-form-link')))
      . '</div><div class="fbss-comments-hide fbss-comments-replace-inner-' . $sid . '">');
  }
  $form['status-comment'] = array(
    '#type' => 'textarea',
    '#rows' => 1,
    '#required' => TRUE,
  );
  $form['sid'] = array(
    '#type' => 'hidden',
    '#value' => $sid,
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Comment'),
    '#ajax' => array(
      'callback' => 'fbss_comments_save_js',
      'wrapper' => 'fbss-comments-replace-' . $sid,
      'effect' => 'fade',
      'method' => 'replace',
    ),
  );
  if (count($comments)) {
    $form['end-hide'] = array('#markup' => '</div>');
  }
  $form['after'] = array('#markup' => '</div>');
  return $form;
}

/**
 * The submit handler for the status comment form.
 */
function fbss_comments_box_submit($form, &$form_state) {
}

/**
 * Saves status comments via AJAX.
 */
function fbss_comments_save_js($form, &$form_state) {
  fbss_comments_save_comment($form_state['values']['sid'], $form_state['values']['status-comment']);
	$comm = array();
  $comm['comments'] = fbss_comments_get_comments($form_state['values']['sid']);
  return theme('fbss_comments_items', $comm);
}

//===============
// INTEGRATIONS.
//===============

/**
 * Implements hook_facebook_status_delete().
 */
function fbss_comments_facebook_status_delete($sid) {
  db_delete('fbss_comments')
	  ->condition('sid', $sid)
	  ->execute();
}

/**
 * Implements hook_preprocess_facebook_status_item().
 */
function fbss_comments_preprocess_facebook_status_item(&$vars) {
  $vars['comments'] = theme('fbss_comments_form_display', array('sid' => $vars['status']->sid, 'delay_load_form' => FALSE, 'delay_load_comments' => FALSE));
}

/**
 * Implements hook_views_api().
 */
function fbss_comments_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_views_default_views_alter().
 */
function fbss_comments_views_default_views_alter(&$views) {
  foreach ($views as $view) {
    // We can't use the base_table property because some FBSS views are based on the {users} table.
    if ($view->tag == 'Facebook-style Statuses') {
      // Do some trickery to make sure the comment box comes before the global:nothing field so that it's available as a token.
      $s = $view->display['default']->display_options['fields']['nothing'];
      unset($view->display['default']->display_options['fields']['nothing']);
      // This won't work anywhere fields are overridden in the default views.
      $view->display['default']->display_options['fields']['comment-box'] = array(
        'label' => '',
        'alter' => array(
          'alter_text' => 0,
          'text' => '',
          'make_link' => 0,
          'path' => '',
          'link_class' => '',
          'alt' => '',
          'prefix' => '',
          'suffix' => '',
          'target' => '',
          'help' => '',
          'trim' => 0,
          'max_length' => '',
          'word_boundary' => 1,
          'ellipsis' => 1,
          'strip_tags' => 0,
          'html' => 0,
        ),
        'empty' => '',
        'hide_empty' => 0,
        'empty_zero' => 0,
        'exclude' => 1,
        'id' => 'comment-box',
        'table' => 'facebook_status',
        'field' => 'comment-box',
        'relationship' => 'none',
        'override' => array(
          'button' => 'Override',
        ),
      );
      $view->display['default']->display_options['fields']['nothing'] = $s;
      $t = $view->display['default']->display_options['fields']['nothing']['alter']['text'];
      if (drupal_substr($t, -6) == '</div>') {
        $t = drupal_substr($t, 0, -6) . ' [comment-box]</div>';
      }
      else {
        $t .= "\n\n<div>[comment-box]</div>";
      }
      $view->display['default']->display_options['fields']['nothing']['alter']['text'] = $t;
    }
  }
}
